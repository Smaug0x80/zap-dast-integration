# Nome do nosso fluxo de trabalho de segurança
name: OWASP ZAP DAST Scan

on:
  # Gatilho 1: dispara o scan em todo push para o branch 'main'
  push:
    branches: [ main ]
    
  # Gatilho 2: permite disparar o scan manualmente pela aba "Actions"
  # Importante no caso do laboratório
  workflow_dispatch:

jobs:
  # Nome do "trabalho" que será executado
  zap_baseline_scan:
    # Nome amigável que aparecerá no GitHub
    name: Run ZAP Baseline Scan
    # A máquina virtual que usaremos (Ubuntu é a padrão e recomendada)
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Precisamos "baixar" o código do nosso repositório
      # (Mesmo que seja só o README, isso é necessário para a Action)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Passo 2: Execução 
      # Usamos a Action oficial do ZAP (zaproxy/action-baseline)
      # Esta action faz um "Scan Básico":
      # 1. Executa o "Spider" do ZAP no alvo (para descobrir páginas)
      # 2. Executa o "Scanner Passivo" (procura falhas sem atacar)
      # 3. Executa o "Scanner Ativo" (testa de modo menos agressivo as páginas encontradas)
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0 # Considere usar uma versão específica
        with:
          # URL Alvo: A URL do Juice Shop
          target: 'https://juice-shop.herokuapp.com'
          
          # (Opcional) Podemos dizer ao ZAP para ignorar certas URLs.
          # O Juice Shop tem um /#/score-board muito volátil, portanto, será ignorado.
          rules_file_name: '.zap/dast-rules.conf'

          # IMPORTANTE: Gerar o relatório em formato SARIF.
          # SARIF é o formato que o GitHub adota para mostrar alertas
          # na aba "Security".
          report_sarif: 'zap-results.sarif'
          
          # Também gerar um relatório HTML.
          report_html: 'zap-report.html'
          
          # IMPORTANTE:
          # Se 'true', o workflow falhará se o ZAP encontrar alertas.
          # Isso “quebra” um "deploy". Vamos deixar 'true'.
          fail_action: true
          
          # Nível mínimo para falhar (WARN = Médio, HIGH = Alto)
          # Falhará se houver alerta de nível médio ou alto.
          min_level: 'WARN'

      # Passo 3: Fazer o upload do relatório HTML (para análise manual)
      # Este passo sempre executa (always())
      - name: Upload HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          # Nome do artefato que aparecerá no GitHub
          name: zap-baseline-report
          # O arquivo que queremos salvar
          path: zap-report.html

      # Passo 4: Fazer o upload do SARIF (para integração com a aba Security)
      # Este é o passo de INTEGRAÇÃO é muito importante.
      # Ele envia os resultados do teste para a aba "Security" do GitHub.
      - name: Upload SARIF to GitHub Security Tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          # O arquivo SARIF que o ZAP gerou no Passo 2
          sarif_file: 'zap-results.sarif'


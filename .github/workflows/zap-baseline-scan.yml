# Nome do fluxo de trabalho: ZAP Full Scan (com conversão JSON->SARIF)
name: ZAP Full Scan (com conversão JSON->SARIF)

on:
  # Gatilho manual (perfeito para testes)
  workflow_dispatch:

jobs:
  zap_full_scan:
    name: Run ZAP Full Scan (JSON -> SARIF)
    runs-on: ubuntu-latest
   
    # As permissões continuam sendo cruciais
    permissions:
      contents: read
      security-events: write

    steps:
      # Passo 1: Checkout (necessário)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Passo 2: Rodar o ZAP Full Scan
      # Esta action é mais poderosa. Ela tem a lógica de conversão
      # de JSON para SARIF embutida.
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.14.0 # Note a action diferente
        with:
          # Alvo de teste
          target: 'http://testphp.vulnweb.com/'
         
          # Nome do arquivo SARIF que a action vai gerar
          # Este é o arquivo que será criado APÓS a conversão
          sarif_file: 'zap-results.sarif'
         
          # (Opcional) Podemos pedir o JSON também, para depuração
          json_file: 'zap-results.json'

          # Usar a imagem Docker estável do ZAP
          docker_name: 'owasp/zap2docker-stable'

          # ATENÇÃO - IMPORTANTE PARA O TESTE:
          # Esta action falha (fica vermelha) se encontrar alertas.
          # Vamos passar opções de linha de comando para o ZAP
          # para que ele IGNORE os alertas (não falhe o build).
          # Nosso objetivo agora é apenas a INTEGRAÇÃO.
          # O '-I' significa 'Ignorar todos os alertas (não falhar)'.
          cmd_options: '-I'

      # Passo 3: Fazer o upload do SARIF gerado
      # Este passo agora deve encontrar o arquivo 'zap-results.sarif',
      # pois a action 'action-full-scan' é especialista em criá-lo.
      - name: Upload SARIF to GitHub Security Tab
        if: always() # Sempre rodar, mesmo se o passo anterior falhar
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'zap-results.sarif'
